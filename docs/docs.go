// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "login user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "auth",
                        "name": "auth",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.tHandlerLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "пользователь успешно аутентифицирован",
                        "schema": {
                            "$ref": "#/definitions/rest.tHandlerLoginResponse"
                        }
                    },
                    "400": {
                        "description": "неверный формат запроса",
                        "schema": {
                            "$ref": "#/definitions/rest.tResultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "логин или пароль не верный",
                        "schema": {
                            "$ref": "#/definitions/rest.tResultErrorResponse"
                        }
                    },
                    "500": {
                        "description": "внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/auth/registration": {
            "post": {
                "description": "registration user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "registration",
                        "name": "registration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.tHandlerRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "пользователь успешно зарегистрирован",
                        "schema": {
                            "$ref": "#/definitions/rest.tHandlerRegistrationResponse"
                        }
                    },
                    "400": {
                        "description": "неверный формат запроса",
                        "schema": {
                            "$ref": "#/definitions/rest.tResultErrorResponse"
                        }
                    },
                    "409": {
                        "description": "логин уже занят",
                        "schema": {
                            "$ref": "#/definitions/rest.tResultErrorResponse"
                        }
                    },
                    "500": {
                        "description": "внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/user/data": {
            "get": {
                "description": "получить данные пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get Datas",
                "parameters": [
                    {
                        "type": "string",
                        "description": "authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "данные получены",
                        "schema": {
                            "$ref": "#/definitions/rest.tHalderGetDatasResponse"
                        }
                    },
                    "401": {
                        "description": "ошибка авторизации"
                    },
                    "500": {
                        "description": "внутренняя ошибка сервера"
                    }
                }
            },
            "post": {
                "description": "создать секрет",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "данные",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.THandlerNewDataRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "данные добавлены",
                        "schema": {
                            "$ref": "#/definitions/rest.THandlerNewDataResponse"
                        }
                    },
                    "400": {
                        "description": "ошибка запроса",
                        "schema": {
                            "$ref": "#/definitions/rest.tResultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "ошибка авторизации"
                    },
                    "500": {
                        "description": "внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/user/data/{id}": {
            "get": {
                "description": "получить данные",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "данные получены",
                        "schema": {
                            "$ref": "#/definitions/rest.THandlerGetDataResponse"
                        }
                    },
                    "204": {
                        "description": "нет данных",
                        "schema": {
                            "$ref": "#/definitions/rest.tResultErrorResponse"
                        }
                    },
                    "400": {
                        "description": "ошибка запроса",
                        "schema": {
                            "$ref": "#/definitions/rest.tResultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "ошибка авторизации"
                    },
                    "500": {
                        "description": "внутренняя ошибка сервера"
                    }
                }
            },
            "put": {
                "description": "обновить секрет",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "authorization",
                        "name": "card",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.THandlerUpdDataRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "data id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "данные получены",
                        "schema": {
                            "$ref": "#/definitions/rest.THandlerUpdDataResponse"
                        }
                    },
                    "400": {
                        "description": "ошибка запроса",
                        "schema": {
                            "$ref": "#/definitions/rest.tResultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "ошибка авторизации"
                    },
                    "500": {
                        "description": "внутренняя ошибка сервера"
                    }
                }
            },
            "delete": {
                "description": "удаляем данные",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "данные удалены",
                        "schema": {
                            "$ref": "#/definitions/rest.THandlerDelDataResponse"
                        }
                    },
                    "204": {
                        "description": "нет данных",
                        "schema": {
                            "$ref": "#/definitions/rest.tResultErrorResponse"
                        }
                    },
                    "400": {
                        "description": "ошибка запроса",
                        "schema": {
                            "$ref": "#/definitions/rest.tResultErrorResponse"
                        }
                    },
                    "401": {
                        "description": "ошибка авторизации"
                    },
                    "500": {
                        "description": "внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/user/info": {
            "get": {
                "description": "login user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "пользователь успешно аутентифицирован",
                        "schema": {
                            "$ref": "#/definitions/rest.tHandlerLoginResponse"
                        }
                    },
                    "500": {
                        "description": "внутренняя ошибка сервера"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.DataType": {
            "type": "string",
            "enum": [
                "CARD",
                "PASSWORD",
                "TEXT",
                "BINARY"
            ],
            "x-enum-varnames": [
                "CARD",
                "PASSWORD",
                "TEXT",
                "BINARY"
            ]
        },
        "rest.THandlerDelDataResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "rest.THandlerGetDataResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/rest.tGetData"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "rest.THandlerNewDataRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "data_type": {
                    "$ref": "#/definitions/models.DataType"
                },
                "title": {
                    "type": "string"
                },
                "update_dt": {
                    "type": "integer"
                }
            }
        },
        "rest.THandlerNewDataResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/rest.tNewData"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "rest.THandlerUpdDataRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "data_type": {
                    "$ref": "#/definitions/models.DataType"
                },
                "is_deleted": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "update_dt": {
                    "type": "integer"
                }
            }
        },
        "rest.THandlerUpdDataResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "rest.tGetData": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "data_type": {
                    "$ref": "#/definitions/models.DataType"
                },
                "id": {
                    "type": "integer"
                },
                "is_deleted": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "update_dt": {
                    "type": "integer"
                }
            }
        },
        "rest.tHalderGetDatasResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rest.tHandlerGetData"
                    }
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "rest.tHandlerGetData": {
            "type": "object",
            "properties": {
                "data_type": {
                    "$ref": "#/definitions/models.DataType"
                },
                "id": {
                    "type": "integer"
                },
                "is_deleted": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "update_dt": {
                    "type": "integer"
                }
            }
        },
        "rest.tHandlerLoginRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "rest.tHandlerLoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "rest.tHandlerRegistrationRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "rest.tHandlerRegistrationResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "rest.tNewData": {
            "type": "object",
            "properties": {
                "data_type": {
                    "$ref": "#/definitions/models.DataType"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "update_dt": {
                    "type": "integer"
                }
            }
        },
        "rest.tResultErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v0",
	Schemes:          []string{},
	Title:            "«GophKeeper»",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
